#BlueJ class context
comment0.target=Book
comment0.text=\n\ A\ class\ that\ maintains\ information\ on\ a\ book.\n\ This\ might\ form\ part\ of\ a\ larger\ application\ such\n\ as\ a\ library\ system,\ for\ instance.\n\n\ @author\ (Katherine\ Garcia.)\n\ @version\ (September\ 28,\ 2023.)\n
comment1.params=bookAuthor\ bookTitle\ bookPages\ bookrefNumber
comment1.target=Book(java.lang.String,\ java.lang.String,\ int,\ java.lang.String)
comment1.text=\n\ Set\ the\ author\ and\ title\ fields\ when\ this\ object\n\ is\ constructed.\n
comment2.params=
comment2.target=java.lang.String\ getAuthor()
comment2.text=\n\ return\ the\ author\ name\n
comment3.params=
comment3.target=java.lang.String\ getTitle()
comment3.text=\n\ return\ the\ book\ title\ name\n
comment4.params=
comment4.target=int\ getPages()
comment4.text=\n\ Add\ pages\ method\n
comment5.params=
comment5.target=void\ printAuthor()
comment5.text=\n\ Print\ a\ book\ author\ to\ terminal\ window\n
comment6.params=
comment6.target=void\ printTitle()
comment6.text=\n\ Print\ book\ title\ to\ terminal\ window\n
comment7.params=
comment7.target=void\ printDetails()
comment7.text=\n\ To\ answer\ question\:\ 2.86\ Are\ the\ Book\ objects\ you\ have\ implemented\n\ immutable?\n\ No,\ the\ object\ created\ are\ not\ immutable\ because\ its\ state\ can\ be\ \n\ modified\ after\ it\ has\ been\ created.\ \n\ Because\ with\ every\ change,\ the\ object\ overwrites\ what\ was\ stored,\ it\n\ is\ not\ immutable.\ \n
comment8.params=ref
comment8.target=void\ setRefNumbber(java.lang.String)
comment9.params=
comment9.target=java.lang.String\ getRefNumber()
numComments=10
